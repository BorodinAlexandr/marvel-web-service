{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","display","Skeleton","comics","comic","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration","width","height","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.163cb164.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    clearError();\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((comic, i) => {\n          // eslint-disable-next-line\n          if (i < 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {comic.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={loading}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=53d38175c749705ccf900c3bc79006e2';\r\n  const _baseOffset = 0;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return { loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n"],"sourceRoot":""}