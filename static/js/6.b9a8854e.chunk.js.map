{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","utils/setContentWithLoading.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","setContentWithLoading","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","display","comics","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","ErrorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","this","setState","children","Component","MainPage","selectedChar","Helmet","content","decoration","width","height","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton","Spinner"],"mappings":"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","file":"static/js/6.b9a8854e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport setContentWithLoading from '../../utils/setContentWithLoading';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContentWithLoading(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === 'error' ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">The character was not found. Check the name and try again</div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=53d38175c749705ccf900c3bc79006e2';\r\n  const _baseOffset = 0;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContentWithLoading = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Spinner />;\r\n    case 'loading':\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case 'confirmed':\r\n      return <Component />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContentWithLoading;\r\n"],"sourceRoot":""}